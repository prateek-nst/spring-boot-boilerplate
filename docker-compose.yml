version: '3'

services:
    read:
        image: grafana/loki:3.0.0
        command: "-config.file=/etc/loki/config.yaml -target=read"
        ports:
            - 3101:3100
            - 7946
            - 9095
        volumes:
            - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
        depends_on:
            - minio
        healthcheck:
            test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks: &loki-dns
            pnst:
                aliases:
                    - loki

    write:
        image: grafana/loki:3.0.0
        command: "-config.file=/etc/loki/config.yaml -target=write"
        ports:
            - 3102:3100
            - 7946
            - 9095
        volumes:
            - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
        healthcheck:
            test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 5
        depends_on:
            - minio
        networks:
            <<: *loki-dns

    alloy:
        image: grafana/alloy:latest
        volumes:
            - ./observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
            - /var/run/docker.sock:/var/run/docker.sock
        command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
        ports:
            - 12345:12345
        depends_on:
            - gateway
        networks:
            - pnst
#        extends:
#            file: common-config.yml
#            service: network-deploy-service

    minio:
        image: minio/minio
        entrypoint:
            - sh
            - -euc
            - |
                mkdir -p /data/loki-data && \
                mkdir -p /data/loki-ruler && \
                minio server /data
        environment:
            - MINIO_ROOT_USER=loki
            - MINIO_ROOT_PASSWORD=supersecret
            - MINIO_PROMETHEUS_AUTH_TYPE=public
            - MINIO_UPDATE=off
        ports:
            - 9000
        volumes:
            - ./.data/minio:/data
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
            interval: 15s
            timeout: 20s
            retries: 5
        networks:
            - pnst
#        extends:
#            file: common-config.yml
#            service: network-deploy-service

    prometheus:
        image: prom/prometheus:v2.50.1
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        networks:
            - pnst
#        extends:
#            file: common-config.yml
#            service: network-deploy-service

    tempo:
        image: grafana/tempo
        container_name: tempo
        command: -config.file /etc/tempo-config.yml
        ports:
            - "3110:3100"
            - "4317:4317"
        volumes:
            - ./observability/tempo/tempo.yml:/etc/tempo-config.yml
        networks:
            - pnst
#        extends:
#            file: common-config.yml
#            service: network-deploy-service

    grafana:
        image: grafana/grafana:latest
        environment:
            - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        depends_on:
            - gateway
        entrypoint:
            - sh
            - -euc
            - |
                /run.sh
        ports:
            - "3000:3000"
        volumes:
            - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
        healthcheck:
            test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - pnst
#        extends:
#            file: common-config.yml
#            service: network-deploy-service

    backend:
        image: grafana/loki:3.0.0
        volumes:
            - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
        ports:
            - "3100"
            - "7946"
        command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
        depends_on:
            - gateway
        networks:
            - pnst
#        extends:
#            file: common-config.yml
#            service: network-deploy-service

    gateway:
        image: nginx:latest
        depends_on:
            - read
            - write
        entrypoint:
            - sh
            - -euc
            - |
                cat <<EOF > /etc/nginx/nginx.conf
                user  nginx;
                worker_processes  5;  ## Default: 1
                
                events {
                  worker_connections   1000;
                }
                
                http {
                  resolver 127.0.0.11;
                
                  server {
                    listen             3100;
                
                    location = / {
                      return 200 'OK';
                      auth_basic off;
                    }
                
                    location = /api/prom/push {
                      proxy_pass       http://write:3100\$$request_uri;
                    }
                
                    location = /api/prom/tail {
                      proxy_pass       http://read:3100\$$request_uri;
                      proxy_set_header Upgrade \$$http_upgrade;
                      proxy_set_header Connection "upgrade";
                    }
                
                    location ~ /api/prom/.* {
                      proxy_pass       http://read:3100\$$request_uri;
                    }
                
                    location = /loki/api/v1/push {
                      proxy_pass       http://write:3100\$$request_uri;
                    }
                
                    location = /loki/api/v1/tail {
                      proxy_pass       http://read:3100\$$request_uri;
                      proxy_set_header Upgrade \$$http_upgrade;
                      proxy_set_header Connection "upgrade";
                    }
                
                    location ~ /loki/api/.* {
                      proxy_pass       http://read:3100\$$request_uri;
                    }
                  }
                }
                EOF
                /docker-entrypoint.sh nginx -g "daemon off;"
        ports:
            - "3100:3100"
        healthcheck:
            test: [ "CMD", "service", "nginx", "status" ]
            interval: 10s
            timeout: 5s
            retries: 5

        networks:
            - pnst

#        extends:
#            file: common-config.yml
#            service: network-deploy-service


    config-server:
        image: pnst/config-server:v1
        ports:
            - "8071:8071"
        healthcheck:
            test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
        networks:
            - pnst

    discover-server:
        image: pnst/discover-server:v1
        ports:
            -   "8761:8761"
        depends_on:
            config-server:
                condition: service_healthy
        healthcheck:
            test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
        networks:
            - pnst

    ms-one:
        image: pnst/ms-one:v1
        ports:
            -   "8081:8081"
        depends_on:
            discover-server:
                condition: service_healthy

        healthcheck:
            test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
        networks:
            - pnst
        environment:
            EUREKA_URI: http://discover-server:8761/eureka/
            CONFIG_SERVER: http://config-server:8071/

    ms-two:
        image: pnst/ms-two:v1
        ports:
            -   "8082:8082"
        depends_on:
            discover-server:
                condition: service_healthy

        healthcheck:
            test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
        networks:
            - pnst
        environment:
            EUREKA_URI: http://discover-server:8761/eureka/

    gateway-server:
        image: pnst/gateway:v1
        ports:
            -   "8888:8888"
        depends_on:
            ms-one:
                condition: service_healthy
            ms-two:
                condition: service_healthy

        healthcheck:
            test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
        networks:
            - pnst
        environment:
            EUREKA_URI: http://discover-server:8761/eureka/
            CONFIG_SERVER: http://config-server:8071/

networks:
    pnst:
